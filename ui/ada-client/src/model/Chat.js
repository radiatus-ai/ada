/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Chat model module.
 * @module model/Chat
 * @version 0.1.0
 */
class Chat {
    /**
     * Constructs a new <code>Chat</code>.
     * @alias module:model/Chat
     * @param name {String}
     * @param model {String}
     * @param id {String}
     * @param projectId {String}
     */
    constructor(name, model, id, projectId) {

        Chat.initialize(this, name, model, id, projectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, model, id, projectId) {
        obj['name'] = name;
        obj['model'] = model;
        obj['id'] = id;
        obj['project_id'] = projectId;
    }

    /**
     * Constructs a <code>Chat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Chat} obj Optional instance to populate.
     * @return {module:model/Chat} The populated <code>Chat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Chat();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('is_user_default')) {
                obj['is_user_default'] = ApiClient.convertToType(data['is_user_default'], 'Boolean');
            }
            if (data.hasOwnProperty('is_starred')) {
                obj['is_starred'] = ApiClient.convertToType(data['is_starred'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Chat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Chat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Chat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['project_id'] && !(typeof data['project_id'] === 'string' || data['project_id'] instanceof String)) {
            throw new Error("Expected the field `project_id` to be a primitive type in the JSON string but got " + data['project_id']);
        }

        return true;
    }


}

Chat.RequiredProperties = ["name", "model", "id", "project_id"];

/**
 * @member {String} name
 */
Chat.prototype['name'] = undefined;

/**
 * @member {String} model
 */
Chat.prototype['model'] = undefined;

/**
 * @member {Boolean} is_user_default
 * @default false
 */
Chat.prototype['is_user_default'] = false;

/**
 * @member {Boolean} is_starred
 * @default false
 */
Chat.prototype['is_starred'] = false;

/**
 * @member {String} id
 */
Chat.prototype['id'] = undefined;

/**
 * @member {String} project_id
 */
Chat.prototype['project_id'] = undefined;






export default Chat;
