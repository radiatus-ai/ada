/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Chat from '../model/Chat';
import ChatMessage from '../model/ChatMessage';
import ChatMessageCreate from '../model/ChatMessageCreate';
import ChatUpdate from '../model/ChatUpdate';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Chats service.
* @module api/ChatsApi
* @version 0.1.0
*/
export default class ChatsApi {

    /**
    * Constructs a new ChatsApi.
    * @alias module:api/ChatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChatMessageChatsChatIdMessagesPost operation.
     * @callback module:api/ChatsApi~createChatMessageChatsChatIdMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Chat Message
     * @param {String} chatId
     * @param {module:model/ChatMessageCreate} chatMessageCreate
     * @param {module:api/ChatsApi~createChatMessageChatsChatIdMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatMessage}
     */
    createChatMessageChatsChatIdMessagesPost(chatId, chatMessageCreate, callback) {
      let postBody = chatMessageCreate;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling createChatMessageChatsChatIdMessagesPost");
      }
      // verify the required parameter 'chatMessageCreate' is set
      if (chatMessageCreate === undefined || chatMessageCreate === null) {
        throw new Error("Missing the required parameter 'chatMessageCreate' when calling createChatMessageChatsChatIdMessagesPost");
      }

      let pathParams = {
        'chat_id': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatMessage;
      return this.apiClient.callApi(
        '/chats/{chat_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChatChatsChatIdDelete operation.
     * @callback module:api/ChatsApi~deleteChatChatsChatIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Chat
     * @param {String} chatId
     * @param {module:api/ChatsApi~deleteChatChatsChatIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chat}
     */
    deleteChatChatsChatIdDelete(chatId, callback) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling deleteChatChatsChatIdDelete");
      }

      let pathParams = {
        'chat_id': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chat;
      return this.apiClient.callApi(
        '/chats/{chat_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readChatChatsChatIdGet operation.
     * @callback module:api/ChatsApi~readChatChatsChatIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Chat
     * @param {String} chatId
     * @param {module:api/ChatsApi~readChatChatsChatIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chat}
     */
    readChatChatsChatIdGet(chatId, callback) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling readChatChatsChatIdGet");
      }

      let pathParams = {
        'chat_id': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chat;
      return this.apiClient.callApi(
        '/chats/{chat_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readChatMessagesChatsChatIdMessagesGet operation.
     * @callback module:api/ChatsApi~readChatMessagesChatsChatIdMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChatMessage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Chat Messages
     * @param {String} chatId
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)]
     * @param {Number} [limit = 100)]
     * @param {module:api/ChatsApi~readChatMessagesChatsChatIdMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChatMessage>}
     */
    readChatMessagesChatsChatIdMessagesGet(chatId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling readChatMessagesChatsChatIdMessagesGet");
      }

      let pathParams = {
        'chat_id': chatId
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChatMessage];
      return this.apiClient.callApi(
        '/chats/{chat_id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChatChatsChatIdPut operation.
     * @callback module:api/ChatsApi~updateChatChatsChatIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Chat
     * @param {String} chatId
     * @param {module:model/ChatUpdate} chatUpdate
     * @param {module:api/ChatsApi~updateChatChatsChatIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chat}
     */
    updateChatChatsChatIdPut(chatId, chatUpdate, callback) {
      let postBody = chatUpdate;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling updateChatChatsChatIdPut");
      }
      // verify the required parameter 'chatUpdate' is set
      if (chatUpdate === undefined || chatUpdate === null) {
        throw new Error("Missing the required parameter 'chatUpdate' when calling updateChatChatsChatIdPut");
      }

      let pathParams = {
        'chat_id': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Chat;
      return this.apiClient.callApi(
        '/chats/{chat_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
