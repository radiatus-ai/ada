/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Chat from '../model/Chat';
import ChatCreate from '../model/ChatCreate';
import HTTPValidationError from '../model/HTTPValidationError';
import ProjectCreate from '../model/ProjectCreate';

/**
* Projects service.
* @module api/ProjectsApi
* @version 0.1.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi.
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChatProjectsProjectIdChatsPost operation.
     * @callback module:api/ProjectsApi~createChatProjectsProjectIdChatsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Chat
     * @param {String} projectId
     * @param {module:model/ChatCreate} chatCreate
     * @param {module:api/ProjectsApi~createChatProjectsProjectIdChatsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chat}
     */
    createChatProjectsProjectIdChatsPost(projectId, chatCreate, callback) {
      let postBody = chatCreate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createChatProjectsProjectIdChatsPost");
      }
      // verify the required parameter 'chatCreate' is set
      if (chatCreate === undefined || chatCreate === null) {
        throw new Error("Missing the required parameter 'chatCreate' when calling createChatProjectsProjectIdChatsPost");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Chat;
      return this.apiClient.callApi(
        '/projects/{project_id}/chats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectsPost operation.
     * @callback module:api/ProjectsApi~createProjectsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * @param {module:model/ProjectCreate} projectCreate
     * @param {module:api/ProjectsApi~createProjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createProjectsPost(projectCreate, callback) {
      let postBody = projectCreate;
      // verify the required parameter 'projectCreate' is set
      if (projectCreate === undefined || projectCreate === null) {
        throw new Error("Missing the required parameter 'projectCreate' when calling createProjectsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjectsProjectsGet operation.
     * @callback module:api/ProjectsApi~listProjectsProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Projects
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)]
     * @param {Number} [limit = 100)]
     * @param {module:api/ProjectsApi~listProjectsProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listProjectsProjectsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readChatsProjectsProjectIdChatsGet operation.
     * @callback module:api/ProjectsApi~readChatsProjectsProjectIdChatsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Chat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Chats
     * @param {String} projectId
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)]
     * @param {Number} [limit = 100)]
     * @param {module:api/ProjectsApi~readChatsProjectsProjectIdChatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Chat>}
     */
    readChatsProjectsProjectIdChatsGet(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling readChatsProjectsProjectIdChatsGet");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Chat];
      return this.apiClient.callApi(
        '/projects/{project_id}/chats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
