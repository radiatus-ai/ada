/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatMessage from '../model/ChatMessage';
import ChatMessageUpdate from '../model/ChatMessageUpdate';
import HTTPValidationError from '../model/HTTPValidationError';
import PostQuery from '../model/PostQuery';

/**
* Messages service.
* @module api/MessagesApi
* @version 0.1.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi.
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteChatMessageMessagesMessageIdDelete operation.
     * @callback module:api/MessagesApi~deleteChatMessageMessagesMessageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Chat Message
     * @param {String} messageId
     * @param {String} projectId
     * @param {String} chatId
     * @param {module:api/MessagesApi~deleteChatMessageMessagesMessageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatMessage}
     */
    deleteChatMessageMessagesMessageIdDelete(messageId, projectId, chatId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteChatMessageMessagesMessageIdDelete");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteChatMessageMessagesMessageIdDelete");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling deleteChatMessageMessagesMessageIdDelete");
      }

      let pathParams = {
        'message_id': messageId
      };
      let queryParams = {
        'project_id': projectId,
        'chat_id': chatId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatMessage;
      return this.apiClient.callApi(
        '/messages/{message_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promptMessagesPromptPost operation.
     * @callback module:api/MessagesApi~promptMessagesPromptPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompt
     * @param {module:model/PostQuery} postQuery
     * @param {module:api/MessagesApi~promptMessagesPromptPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    promptMessagesPromptPost(postQuery, callback) {
      let postBody = postQuery;
      // verify the required parameter 'postQuery' is set
      if (postQuery === undefined || postQuery === null) {
        throw new Error("Missing the required parameter 'postQuery' when calling promptMessagesPromptPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/messages/prompt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promptMessagesStreamPost operation.
     * @callback module:api/MessagesApi~promptMessagesStreamPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompt
     * @param {module:model/PostQuery} postQuery
     * @param {module:api/MessagesApi~promptMessagesStreamPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    promptMessagesStreamPost(postQuery, callback) {
      let postBody = postQuery;
      // verify the required parameter 'postQuery' is set
      if (postQuery === undefined || postQuery === null) {
        throw new Error("Missing the required parameter 'postQuery' when calling promptMessagesStreamPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/messages/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChatMessageMessagesMessageIdPut operation.
     * @callback module:api/MessagesApi~updateChatMessageMessagesMessageIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Chat Message
     * @param {String} messageId
     * @param {String} chatId
     * @param {module:model/ChatMessageUpdate} chatMessageUpdate
     * @param {module:api/MessagesApi~updateChatMessageMessagesMessageIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatMessage}
     */
    updateChatMessageMessagesMessageIdPut(messageId, chatId, chatMessageUpdate, callback) {
      let postBody = chatMessageUpdate;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling updateChatMessageMessagesMessageIdPut");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling updateChatMessageMessagesMessageIdPut");
      }
      // verify the required parameter 'chatMessageUpdate' is set
      if (chatMessageUpdate === undefined || chatMessageUpdate === null) {
        throw new Error("Missing the required parameter 'chatMessageUpdate' when calling updateChatMessageMessagesMessageIdPut");
      }

      let pathParams = {
        'message_id': messageId
      };
      let queryParams = {
        'chat_id': chatId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatMessage;
      return this.apiClient.callApi(
        '/messages/{message_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
