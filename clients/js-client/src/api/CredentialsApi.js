/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Credential from "../model/Credential";
import CredentialCreate from "../model/CredentialCreate";
import CredentialUpdate from "../model/CredentialUpdate";
import HTTPValidationError from "../model/HTTPValidationError";

/**
 * Credentials service.
 * @module api/CredentialsApi
 * @version 0.1.0
 */
export default class CredentialsApi {
  /**
   * Constructs a new CredentialsApi.
   * @alias module:api/CredentialsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createCredentialAdaV1CredentialsPost operation.
   * @callback module:api/CredentialsApi~createCredentialAdaV1CredentialsPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Credential} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create Credential
   * Create a new credential.
   * @param {module:model/CredentialCreate} credentialCreate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/CredentialsApi~createCredentialAdaV1CredentialsPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Credential}
   */
  createCredentialAdaV1CredentialsPost(credentialCreate, opts, callback) {
    opts = opts || {};
    let postBody = credentialCreate;
    // verify the required parameter 'credentialCreate' is set
    if (credentialCreate === undefined || credentialCreate === null) {
      throw new Error(
        "Missing the required parameter 'credentialCreate' when calling createCredentialAdaV1CredentialsPost",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Credential;
    return this.apiClient.callApi(
      "/ada/v1/credentials/",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the deleteCredentialAdaV1CredentialsCredentialIdDelete operation.
   * @callback module:api/CredentialsApi~deleteCredentialAdaV1CredentialsCredentialIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Credential} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete Credential
   * Delete a credential.
   * @param {Number} credentialId
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/CredentialsApi~deleteCredentialAdaV1CredentialsCredentialIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Credential}
   */
  deleteCredentialAdaV1CredentialsCredentialIdDelete(
    credentialId,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'credentialId' is set
    if (credentialId === undefined || credentialId === null) {
      throw new Error(
        "Missing the required parameter 'credentialId' when calling deleteCredentialAdaV1CredentialsCredentialIdDelete",
      );
    }

    let pathParams = {
      credential_id: credentialId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Credential;
    return this.apiClient.callApi(
      "/ada/v1/credentials/{credential_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the readCredentialAdaV1CredentialsCredentialIdGet operation.
   * @callback module:api/CredentialsApi~readCredentialAdaV1CredentialsCredentialIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Credential} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Read Credential
   * Get a specific credential by ID.
   * @param {Number} credentialId
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/CredentialsApi~readCredentialAdaV1CredentialsCredentialIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Credential}
   */
  readCredentialAdaV1CredentialsCredentialIdGet(credentialId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'credentialId' is set
    if (credentialId === undefined || credentialId === null) {
      throw new Error(
        "Missing the required parameter 'credentialId' when calling readCredentialAdaV1CredentialsCredentialIdGet",
      );
    }

    let pathParams = {
      credential_id: credentialId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Credential;
    return this.apiClient.callApi(
      "/ada/v1/credentials/{credential_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the readCredentialsAdaV1CredentialsGet operation.
   * @callback module:api/CredentialsApi~readCredentialsAdaV1CredentialsGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Credential>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Read Credentials
   * Retrieve credentials.
   * @param {Object} opts Optional parameters
   * @param {Number} [skip = 0)]
   * @param {Number} [limit = 100)]
   * @param {String} [xAdaToken]
   * @param {module:api/CredentialsApi~readCredentialsAdaV1CredentialsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Credential>}
   */
  readCredentialsAdaV1CredentialsGet(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      skip: opts["skip"],
      limit: opts["limit"],
    };
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [Credential];
    return this.apiClient.callApi(
      "/ada/v1/credentials/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the updateCredentialAdaV1CredentialsCredentialIdPut operation.
   * @callback module:api/CredentialsApi~updateCredentialAdaV1CredentialsCredentialIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Credential} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update Credential
   * Update a credential.
   * @param {Number} credentialId
   * @param {module:model/CredentialUpdate} credentialUpdate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/CredentialsApi~updateCredentialAdaV1CredentialsCredentialIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Credential}
   */
  updateCredentialAdaV1CredentialsCredentialIdPut(
    credentialId,
    credentialUpdate,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = credentialUpdate;
    // verify the required parameter 'credentialId' is set
    if (credentialId === undefined || credentialId === null) {
      throw new Error(
        "Missing the required parameter 'credentialId' when calling updateCredentialAdaV1CredentialsCredentialIdPut",
      );
    }
    // verify the required parameter 'credentialUpdate' is set
    if (credentialUpdate === undefined || credentialUpdate === null) {
      throw new Error(
        "Missing the required parameter 'credentialUpdate' when calling updateCredentialAdaV1CredentialsCredentialIdPut",
      );
    }

    let pathParams = {
      credential_id: credentialId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Credential;
    return this.apiClient.callApi(
      "/ada/v1/credentials/{credential_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
