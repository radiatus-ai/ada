/**
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Chat from "../model/Chat";
import ChatCreate from "../model/ChatCreate";
import ChatMessage from "../model/ChatMessage";
import ChatMessageCreate from "../model/ChatMessageCreate";
import ChatMessageUpdate from "../model/ChatMessageUpdate";
import ChatUpdate from "../model/ChatUpdate";
import HTTPValidationError from "../model/HTTPValidationError";
import ProjectCreate from "../model/ProjectCreate";

/**
 * Projects service.
 * @module api/ProjectsApi
 * @version 0.1.0
 */
export default class ProjectsApi {
  /**
   * Constructs a new ProjectsApi.
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createAdaV1ProjectsPost operation.
   * @callback module:api/ProjectsApi~createAdaV1ProjectsPostCallback
   * @param {String} error Error message, if any.
   * @param {Object} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create
   * @param {module:model/ProjectCreate} projectCreate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~createAdaV1ProjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object}
   */
  createAdaV1ProjectsPost(projectCreate, opts, callback) {
    opts = opts || {};
    let postBody = projectCreate;
    // verify the required parameter 'projectCreate' is set
    if (projectCreate === undefined || projectCreate === null) {
      throw new Error(
        "Missing the required parameter 'projectCreate' when calling createAdaV1ProjectsPost",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Object;
    return this.apiClient.callApi(
      "/ada/v1/projects",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the createChatAdaV1ProjectsProjectIdChatsPost operation.
   * @callback module:api/ProjectsApi~createChatAdaV1ProjectsProjectIdChatsPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Chat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create Chat
   * @param {Number} projectId
   * @param {module:model/ChatCreate} chatCreate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~createChatAdaV1ProjectsProjectIdChatsPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Chat}
   */
  createChatAdaV1ProjectsProjectIdChatsPost(
    projectId,
    chatCreate,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = chatCreate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling createChatAdaV1ProjectsProjectIdChatsPost",
      );
    }
    // verify the required parameter 'chatCreate' is set
    if (chatCreate === undefined || chatCreate === null) {
      throw new Error(
        "Missing the required parameter 'chatCreate' when calling createChatAdaV1ProjectsProjectIdChatsPost",
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Chat;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost operation.
   * @callback module:api/ProjectsApi~createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ChatMessage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create Chat Message
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {module:model/ChatMessageCreate} chatMessageCreate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ChatMessage}
   */
  createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost(
    projectId,
    chatId,
    chatMessageCreate,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = chatMessageCreate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost",
      );
    }
    // verify the required parameter 'chatMessageCreate' is set
    if (chatMessageCreate === undefined || chatMessageCreate === null) {
      throw new Error(
        "Missing the required parameter 'chatMessageCreate' when calling createChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ChatMessage;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}/messages",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the deleteChatAdaV1ProjectsProjectIdChatsChatIdDelete operation.
   * @callback module:api/ProjectsApi~deleteChatAdaV1ProjectsProjectIdChatsChatIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Chat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete Chat
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~deleteChatAdaV1ProjectsProjectIdChatsChatIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Chat}
   */
  deleteChatAdaV1ProjectsProjectIdChatsChatIdDelete(
    projectId,
    chatId,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deleteChatAdaV1ProjectsProjectIdChatsChatIdDelete",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling deleteChatAdaV1ProjectsProjectIdChatsChatIdDelete",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Chat;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete operation.
   * @callback module:api/ProjectsApi~deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ChatMessage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete Chat Message
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {Number} messageId
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ChatMessage}
   */
  deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete(
    projectId,
    chatId,
    messageId,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete",
      );
    }
    // verify the required parameter 'messageId' is set
    if (messageId === undefined || messageId === null) {
      throw new Error(
        "Missing the required parameter 'messageId' when calling deleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
      message_id: messageId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ChatMessage;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}/messages/{message_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the listProjectsAdaV1ProjectsGet operation.
   * @callback module:api/ProjectsApi~listProjectsAdaV1ProjectsGetCallback
   * @param {String} error Error message, if any.
   * @param {Object} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * List Projects
   * @param {Object} opts Optional parameters
   * @param {Number} [skip = 0)]
   * @param {Number} [limit = 100)]
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~listProjectsAdaV1ProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object}
   */
  listProjectsAdaV1ProjectsGet(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      skip: opts["skip"],
      limit: opts["limit"],
    };
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Object;
    return this.apiClient.callApi(
      "/ada/v1/projects",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the readChatAdaV1ProjectsProjectIdChatsChatIdGet operation.
   * @callback module:api/ProjectsApi~readChatAdaV1ProjectsProjectIdChatsChatIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Chat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Read Chat
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~readChatAdaV1ProjectsProjectIdChatsChatIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Chat}
   */
  readChatAdaV1ProjectsProjectIdChatsChatIdGet(
    projectId,
    chatId,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling readChatAdaV1ProjectsProjectIdChatsChatIdGet",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling readChatAdaV1ProjectsProjectIdChatsChatIdGet",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Chat;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the readChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGet operation.
   * @callback module:api/ProjectsApi~readChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ChatMessage>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Read Chat Messages
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {Object} opts Optional parameters
   * @param {Number} [skip = 0)]
   * @param {Number} [limit = 100)]
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~readChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/ChatMessage>}
   */
  readChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGet(
    projectId,
    chatId,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling readChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGet",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling readChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGet",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
    };
    let queryParams = {
      skip: opts["skip"],
      limit: opts["limit"],
    };
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [ChatMessage];
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}/messages",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the readChatsAdaV1ProjectsProjectIdChatsGet operation.
   * @callback module:api/ProjectsApi~readChatsAdaV1ProjectsProjectIdChatsGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Chat>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Read Chats
   * @param {Number} projectId
   * @param {Object} opts Optional parameters
   * @param {Number} [skip = 0)]
   * @param {Number} [limit = 100)]
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~readChatsAdaV1ProjectsProjectIdChatsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Chat>}
   */
  readChatsAdaV1ProjectsProjectIdChatsGet(projectId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling readChatsAdaV1ProjectsProjectIdChatsGet",
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      skip: opts["skip"],
      limit: opts["limit"],
    };
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [Chat];
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the updateChatAdaV1ProjectsProjectIdChatsChatIdPut operation.
   * @callback module:api/ProjectsApi~updateChatAdaV1ProjectsProjectIdChatsChatIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Chat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update Chat
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {module:model/ChatUpdate} chatUpdate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~updateChatAdaV1ProjectsProjectIdChatsChatIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Chat}
   */
  updateChatAdaV1ProjectsProjectIdChatsChatIdPut(
    projectId,
    chatId,
    chatUpdate,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = chatUpdate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling updateChatAdaV1ProjectsProjectIdChatsChatIdPut",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling updateChatAdaV1ProjectsProjectIdChatsChatIdPut",
      );
    }
    // verify the required parameter 'chatUpdate' is set
    if (chatUpdate === undefined || chatUpdate === null) {
      throw new Error(
        "Missing the required parameter 'chatUpdate' when calling updateChatAdaV1ProjectsProjectIdChatsChatIdPut",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Chat;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut operation.
   * @callback module:api/ProjectsApi~updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ChatMessage} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update Chat Message
   * @param {Number} projectId
   * @param {Number} chatId
   * @param {Number} messageId
   * @param {module:model/ChatMessageUpdate} chatMessageUpdate
   * @param {Object} opts Optional parameters
   * @param {String} [xAdaToken]
   * @param {module:api/ProjectsApi~updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ChatMessage}
   */
  updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut(
    projectId,
    chatId,
    messageId,
    chatMessageUpdate,
    opts,
    callback,
  ) {
    opts = opts || {};
    let postBody = chatMessageUpdate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut",
      );
    }
    // verify the required parameter 'chatId' is set
    if (chatId === undefined || chatId === null) {
      throw new Error(
        "Missing the required parameter 'chatId' when calling updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut",
      );
    }
    // verify the required parameter 'messageId' is set
    if (messageId === undefined || messageId === null) {
      throw new Error(
        "Missing the required parameter 'messageId' when calling updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut",
      );
    }
    // verify the required parameter 'chatMessageUpdate' is set
    if (chatMessageUpdate === undefined || chatMessageUpdate === null) {
      throw new Error(
        "Missing the required parameter 'chatMessageUpdate' when calling updateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut",
      );
    }

    let pathParams = {
      project_id: projectId,
      chat_id: chatId,
      message_id: messageId,
    };
    let queryParams = {};
    let headerParams = {
      "x-ada-token": opts["xAdaToken"],
    };
    let formParams = {};

    let authNames = ["HTTPBearer"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = ChatMessage;
    return this.apiClient.callApi(
      "/ada/v1/projects/{project_id}/chats/{chat_id}/messages/{message_id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
