/*
Platform API

Testing ProjectsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProjectsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectsAPIService CreateAdaV1ProjectsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.CreateAdaV1ProjectsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService CreateChatAdaV1ProjectsProjectIdChatsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectsAPI.CreateChatAdaV1ProjectsProjectIdChatsPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService CreateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32

		resp, httpRes, err := apiClient.ProjectsAPI.CreateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesPost(context.Background(), projectId, chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService DeleteChatAdaV1ProjectsProjectIdChatsChatIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32

		resp, httpRes, err := apiClient.ProjectsAPI.DeleteChatAdaV1ProjectsProjectIdChatsChatIdDelete(context.Background(), projectId, chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService DeleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32
		var messageId int32

		resp, httpRes, err := apiClient.ProjectsAPI.DeleteChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdDelete(context.Background(), projectId, chatId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ListProjectsAdaV1ProjectsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.ListProjectsAdaV1ProjectsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ReadChatAdaV1ProjectsProjectIdChatsChatIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32

		resp, httpRes, err := apiClient.ProjectsAPI.ReadChatAdaV1ProjectsProjectIdChatsChatIdGet(context.Background(), projectId, chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ReadChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32

		resp, httpRes, err := apiClient.ProjectsAPI.ReadChatMessagesAdaV1ProjectsProjectIdChatsChatIdMessagesGet(context.Background(), projectId, chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ReadChatsAdaV1ProjectsProjectIdChatsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectsAPI.ReadChatsAdaV1ProjectsProjectIdChatsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService UpdateChatAdaV1ProjectsProjectIdChatsChatIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32

		resp, httpRes, err := apiClient.ProjectsAPI.UpdateChatAdaV1ProjectsProjectIdChatsChatIdPut(context.Background(), projectId, chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService UpdateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var chatId int32
		var messageId int32

		resp, httpRes, err := apiClient.ProjectsAPI.UpdateChatMessageAdaV1ProjectsProjectIdChatsChatIdMessagesMessageIdPut(context.Background(), projectId, chatId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
