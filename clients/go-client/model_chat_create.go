/*
Platform API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCreate{}

// ChatCreate struct for ChatCreate
type ChatCreate struct {
	Name string `json:"name"`
	Model string `json:"model"`
	ProjectId int32 `json:"project_id"`
}

type _ChatCreate ChatCreate

// NewChatCreate instantiates a new ChatCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCreate(name string, model string, projectId int32) *ChatCreate {
	this := ChatCreate{}
	this.Name = name
	this.Model = model
	this.ProjectId = projectId
	return &this
}

// NewChatCreateWithDefaults instantiates a new ChatCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCreateWithDefaults() *ChatCreate {
	this := ChatCreate{}
	return &this
}

// GetName returns the Name field value
func (o *ChatCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChatCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChatCreate) SetName(v string) {
	o.Name = v
}

// GetModel returns the Model field value
func (o *ChatCreate) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ChatCreate) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ChatCreate) SetModel(v string) {
	o.Model = v
}

// GetProjectId returns the ProjectId field value
func (o *ChatCreate) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ChatCreate) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ChatCreate) SetProjectId(v int32) {
	o.ProjectId = v
}

func (o ChatCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["model"] = o.Model
	toSerialize["project_id"] = o.ProjectId
	return toSerialize, nil
}

func (o *ChatCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"model",
		"project_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCreate := _ChatCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCreate)

	if err != nil {
		return err
	}

	*o = ChatCreate(varChatCreate)

	return err
}

type NullableChatCreate struct {
	value *ChatCreate
	isSet bool
}

func (v NullableChatCreate) Get() *ChatCreate {
	return v.value
}

func (v *NullableChatCreate) Set(val *ChatCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCreate(val *ChatCreate) *NullableChatCreate {
	return &NullableChatCreate{value: val, isSet: true}
}

func (v NullableChatCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
