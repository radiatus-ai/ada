/*
Platform API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Chat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chat{}

// Chat struct for Chat
type Chat struct {
	Name string `json:"name"`
	Model string `json:"model"`
	ProjectId int32 `json:"project_id"`
	Id int32 `json:"id"`
}

type _Chat Chat

// NewChat instantiates a new Chat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChat(name string, model string, projectId int32, id int32) *Chat {
	this := Chat{}
	this.Name = name
	this.Model = model
	this.ProjectId = projectId
	this.Id = id
	return &this
}

// NewChatWithDefaults instantiates a new Chat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatWithDefaults() *Chat {
	this := Chat{}
	return &this
}

// GetName returns the Name field value
func (o *Chat) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Chat) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Chat) SetName(v string) {
	o.Name = v
}

// GetModel returns the Model field value
func (o *Chat) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *Chat) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *Chat) SetModel(v string) {
	o.Model = v
}

// GetProjectId returns the ProjectId field value
func (o *Chat) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Chat) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Chat) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetId returns the Id field value
func (o *Chat) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Chat) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Chat) SetId(v int32) {
	o.Id = v
}

func (o Chat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["model"] = o.Model
	toSerialize["project_id"] = o.ProjectId
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *Chat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"model",
		"project_id",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChat := _Chat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChat)

	if err != nil {
		return err
	}

	*o = Chat(varChat)

	return err
}

type NullableChat struct {
	value *Chat
	isSet bool
}

func (v NullableChat) Get() *Chat {
	return v.value
}

func (v *NullableChat) Set(val *Chat) {
	v.value = val
	v.isSet = true
}

func (v NullableChat) IsSet() bool {
	return v.isSet
}

func (v *NullableChat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChat(val *Chat) *NullableChat {
	return &NullableChat{value: val, isSet: true}
}

func (v NullableChat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
