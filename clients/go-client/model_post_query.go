/*
Platform API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostQuery{}

// PostQuery struct for PostQuery
type PostQuery struct {
	Token string `json:"token"`
	OrganizationId int32 `json:"organization_id"`
}

type _PostQuery PostQuery

// NewPostQuery instantiates a new PostQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostQuery(token string, organizationId int32) *PostQuery {
	this := PostQuery{}
	this.Token = token
	this.OrganizationId = organizationId
	return &this
}

// NewPostQueryWithDefaults instantiates a new PostQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostQueryWithDefaults() *PostQuery {
	this := PostQuery{}
	return &this
}

// GetToken returns the Token field value
func (o *PostQuery) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *PostQuery) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *PostQuery) SetToken(v string) {
	o.Token = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *PostQuery) GetOrganizationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *PostQuery) GetOrganizationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *PostQuery) SetOrganizationId(v int32) {
	o.OrganizationId = v
}

func (o PostQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	toSerialize["organization_id"] = o.OrganizationId
	return toSerialize, nil
}

func (o *PostQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
		"organization_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostQuery := _PostQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostQuery)

	if err != nil {
		return err
	}

	*o = PostQuery(varPostQuery)

	return err
}

type NullablePostQuery struct {
	value *PostQuery
	isSet bool
}

func (v NullablePostQuery) Get() *PostQuery {
	return v.value
}

func (v *NullablePostQuery) Set(val *PostQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePostQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePostQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostQuery(val *PostQuery) *NullablePostQuery {
	return &NullablePostQuery{value: val, isSet: true}
}

func (v NullablePostQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
