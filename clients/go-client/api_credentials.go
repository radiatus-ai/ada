/*
Platform API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CredentialsAPIService CredentialsAPI service
type CredentialsAPIService service

type ApiCreateCredentialAdaV1CredentialsPostRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	credentialCreate *CredentialCreate
	xAdaToken *string
}

func (r ApiCreateCredentialAdaV1CredentialsPostRequest) CredentialCreate(credentialCreate CredentialCreate) ApiCreateCredentialAdaV1CredentialsPostRequest {
	r.credentialCreate = &credentialCreate
	return r
}

func (r ApiCreateCredentialAdaV1CredentialsPostRequest) XAdaToken(xAdaToken string) ApiCreateCredentialAdaV1CredentialsPostRequest {
	r.xAdaToken = &xAdaToken
	return r
}

func (r ApiCreateCredentialAdaV1CredentialsPostRequest) Execute() (*Credential, *http.Response, error) {
	return r.ApiService.CreateCredentialAdaV1CredentialsPostExecute(r)
}

/*
CreateCredentialAdaV1CredentialsPost Create Credential

Create a new credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCredentialAdaV1CredentialsPostRequest
*/
func (a *CredentialsAPIService) CreateCredentialAdaV1CredentialsPost(ctx context.Context) ApiCreateCredentialAdaV1CredentialsPostRequest {
	return ApiCreateCredentialAdaV1CredentialsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Credential
func (a *CredentialsAPIService) CreateCredentialAdaV1CredentialsPostExecute(r ApiCreateCredentialAdaV1CredentialsPostRequest) (*Credential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Credential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.CreateCredentialAdaV1CredentialsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ada/v1/credentials/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.credentialCreate == nil {
		return localVarReturnValue, nil, reportError("credentialCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAdaToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-ada-token", r.xAdaToken, "")
	}
	// body params
	localVarPostBody = r.credentialCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	credentialId int32
	xAdaToken *string
}

func (r ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest) XAdaToken(xAdaToken string) ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest {
	r.xAdaToken = &xAdaToken
	return r
}

func (r ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest) Execute() (*Credential, *http.Response, error) {
	return r.ApiService.DeleteCredentialAdaV1CredentialsCredentialIdDeleteExecute(r)
}

/*
DeleteCredentialAdaV1CredentialsCredentialIdDelete Delete Credential

Delete a credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param credentialId
 @return ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest
*/
func (a *CredentialsAPIService) DeleteCredentialAdaV1CredentialsCredentialIdDelete(ctx context.Context, credentialId int32) ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest {
	return ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		credentialId: credentialId,
	}
}

// Execute executes the request
//  @return Credential
func (a *CredentialsAPIService) DeleteCredentialAdaV1CredentialsCredentialIdDeleteExecute(r ApiDeleteCredentialAdaV1CredentialsCredentialIdDeleteRequest) (*Credential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Credential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.DeleteCredentialAdaV1CredentialsCredentialIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ada/v1/credentials/{credential_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"credential_id"+"}", url.PathEscape(parameterValueToString(r.credentialId, "credentialId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAdaToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-ada-token", r.xAdaToken, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	credentialId int32
	xAdaToken *string
}

func (r ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest) XAdaToken(xAdaToken string) ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest {
	r.xAdaToken = &xAdaToken
	return r
}

func (r ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest) Execute() (*Credential, *http.Response, error) {
	return r.ApiService.ReadCredentialAdaV1CredentialsCredentialIdGetExecute(r)
}

/*
ReadCredentialAdaV1CredentialsCredentialIdGet Read Credential

Get a specific credential by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param credentialId
 @return ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest
*/
func (a *CredentialsAPIService) ReadCredentialAdaV1CredentialsCredentialIdGet(ctx context.Context, credentialId int32) ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest {
	return ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest{
		ApiService: a,
		ctx: ctx,
		credentialId: credentialId,
	}
}

// Execute executes the request
//  @return Credential
func (a *CredentialsAPIService) ReadCredentialAdaV1CredentialsCredentialIdGetExecute(r ApiReadCredentialAdaV1CredentialsCredentialIdGetRequest) (*Credential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Credential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.ReadCredentialAdaV1CredentialsCredentialIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ada/v1/credentials/{credential_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"credential_id"+"}", url.PathEscape(parameterValueToString(r.credentialId, "credentialId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAdaToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-ada-token", r.xAdaToken, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCredentialsAdaV1CredentialsGetRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	skip *int32
	limit *int32
	xAdaToken *string
}

func (r ApiReadCredentialsAdaV1CredentialsGetRequest) Skip(skip int32) ApiReadCredentialsAdaV1CredentialsGetRequest {
	r.skip = &skip
	return r
}

func (r ApiReadCredentialsAdaV1CredentialsGetRequest) Limit(limit int32) ApiReadCredentialsAdaV1CredentialsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiReadCredentialsAdaV1CredentialsGetRequest) XAdaToken(xAdaToken string) ApiReadCredentialsAdaV1CredentialsGetRequest {
	r.xAdaToken = &xAdaToken
	return r
}

func (r ApiReadCredentialsAdaV1CredentialsGetRequest) Execute() ([]Credential, *http.Response, error) {
	return r.ApiService.ReadCredentialsAdaV1CredentialsGetExecute(r)
}

/*
ReadCredentialsAdaV1CredentialsGet Read Credentials

Retrieve credentials.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReadCredentialsAdaV1CredentialsGetRequest
*/
func (a *CredentialsAPIService) ReadCredentialsAdaV1CredentialsGet(ctx context.Context) ApiReadCredentialsAdaV1CredentialsGetRequest {
	return ApiReadCredentialsAdaV1CredentialsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Credential
func (a *CredentialsAPIService) ReadCredentialsAdaV1CredentialsGetExecute(r ApiReadCredentialsAdaV1CredentialsGetRequest) ([]Credential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Credential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.ReadCredentialsAdaV1CredentialsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ada/v1/credentials/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "")
	} else {
		var defaultValue int32 = 0
		r.skip = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAdaToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-ada-token", r.xAdaToken, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	credentialId int32
	credentialUpdate *CredentialUpdate
	xAdaToken *string
}

func (r ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest) CredentialUpdate(credentialUpdate CredentialUpdate) ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest {
	r.credentialUpdate = &credentialUpdate
	return r
}

func (r ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest) XAdaToken(xAdaToken string) ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest {
	r.xAdaToken = &xAdaToken
	return r
}

func (r ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest) Execute() (*Credential, *http.Response, error) {
	return r.ApiService.UpdateCredentialAdaV1CredentialsCredentialIdPutExecute(r)
}

/*
UpdateCredentialAdaV1CredentialsCredentialIdPut Update Credential

Update a credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param credentialId
 @return ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest
*/
func (a *CredentialsAPIService) UpdateCredentialAdaV1CredentialsCredentialIdPut(ctx context.Context, credentialId int32) ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest {
	return ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest{
		ApiService: a,
		ctx: ctx,
		credentialId: credentialId,
	}
}

// Execute executes the request
//  @return Credential
func (a *CredentialsAPIService) UpdateCredentialAdaV1CredentialsCredentialIdPutExecute(r ApiUpdateCredentialAdaV1CredentialsCredentialIdPutRequest) (*Credential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Credential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.UpdateCredentialAdaV1CredentialsCredentialIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ada/v1/credentials/{credential_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"credential_id"+"}", url.PathEscape(parameterValueToString(r.credentialId, "credentialId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.credentialUpdate == nil {
		return localVarReturnValue, nil, reportError("credentialUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAdaToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-ada-token", r.xAdaToken, "")
	}
	// body params
	localVarPostBody = r.credentialUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
